''' This code is written by Saumya Agarwal and John A. Mcgreevey as part of Lab 3 -Adv malware '''

import idaapi
import idautils
import idc
import graphviz
import ida_allins

from idautils import *
from idaapi import *
from idc import *


class InstructionStructure():
    def __init__(self, count, address,defuse):
        self.count = count
        self.address = address
        self.defuse = defuse

def search(list, operand):
    for i in range(len(list)):
        if list[i] == operand:
            return True
    return False

def operand_search(list, operand):
    multi_operands = []
    count = 0
    for i in range(len(operand)):
        if operand[i] == "+":
            count += 1
    if count == 0:
        for i in range(len(list)):
            if operand.find(list[i]) != -1:
                multi_operands.append(list[i])
    else:
        for i in range(len(list)):
            if operand.find(list[i]) != -1 and count > 0:
                multi_operands.append(list[i])
                count -= 1
    if (len(multi_operands) == 0):
        return None
    else:
        solution = ""
        for i in range(len(multi_operands)):
            solution += multi_operands[i]
            if (i < len(multi_operands) - 1):
                solution += ","
        return solution

def get_inst_type(iterator):
    insn = idaapi.insn_t()
    length = idaapi.decode_insn(insn, iterator)
    list = ["EAX", "EBX", "ECX", "EDX", "ESI", "EDI", "EBP", "ESP","AL","BL","CL","DL"]
    dfuse=""
    if insn.itype in [ida_allins.NN_mov]:
        if search(list, idc.print_operand(iterator,0).upper()) and search(list,idc.print_operand(iterator,1).upper()):
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+", U:"+ idc.print_operand(iterator,1).upper()
        elif search(list, idc.print_operand(iterator,0).upper()) and (operand_search(list,idc.print_operand(iterator,1).upper()) is not None):
            dfuse = "; D:" + idc.print_operand(iterator,0).upper() + ", U:"+idc.print_operand(iterator,1).upper()
        elif search(list,idc.print_operand(iterator,1).upper()) and (operand_search(list,idc.print_operand(iterator,0).upper()) is not None):
            dfuse = "; D:" + idc.print_operand(iterator,0).upper() + ", U:"+idc.print_operand(iterator,1).upper() + ","+operand_search(list,idc.print_operand(iterator,0).upper())
        elif search(list,idc.print_operand(iterator,0).upper()):
            dfuse = "; D:" + idc.print_operand(iterator,0).upper() + ", U:"
        elif operand_search(list,idc.print_operand(iterator,0).upper()) is not None:
            dfuse = "; D:" + idc.print_operand(iterator,0).upper() + ", U:" + operand_search(list,idc.print_operand(iterator,0).upper())
        else:
            dfuse = "; D:" + idc.print_operand(iterator,0).upper() + ", U:" + idc.print_operand(iterator,1).upper()
    elif insn.itype in [ida_allins.NN_movsx]:
        if search(list, idc.print_operand(iterator,0).upper()) and search(list,idc.print_operand(iterator,1).upper()):
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+", U:"+ idc.print_operand(iterator,1).upper()
        elif search(list, idc.print_operand(iterator,0).upper()) and (operand_search(list,idc.print_operand(iterator,1).upper()) is not None):
            dfuse = "; D:" + idc.print_operand(iterator,0).upper() + ", U:"+idc.print_operand(iterator,1).upper()
        elif search(list,idc.print_operand(iterator,1).upper()) and (operand_search(list,idc.print_operand(iterator,0).upper()) is not None):
            dfuse = "; D:" + idc.print_operand(iterator,0).upper() + ", U:"+idc.print_operand(iterator,1).upper() + ","+operand_search(list,idc.print_operand(iterator,0).upper())
        elif search(list,idc.print_operand(iterator,0).upper()):
            dfuse = "; D:" + idc.print_operand(iterator,0).upper() + ", U:"
        elif operand_search(list,idc.print_operand(iterator,0).upper()) is not None:
            dfuse = "; D:" + idc.print_operand(iterator,0).upper() + ", U:" + operand_search(list,idc.print_operand(iterator,0).upper())
        else:
            dfuse = "; D:" + idc.print_operand(iterator,0).upper() + ", U:" + idc.print_operand(iterator,1).upper()
    elif insn.itype in [ida_allins.NN_lea]:
        if(operand_search(list, idc.print_operand(iterator,1).upper()) is not None):
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+", U:" + operand_search(list, idc.print_operand(iterator,1).upper())
    elif insn.itype in [ida_allins.NN_jz]:
        dfuse="; D: U:EFLAGS"
    elif insn.itype in [ida_allins.NN_jnz]:
        dfuse="; D: U:EFLAGS"
    elif insn.itype in [ida_allins.NN_jb]:
        dfuse="; D: U:EFLAGS"
    elif insn.itype in [ida_allins.NN_jbe]:
        dfuse="; D: U:EFLAGS"
    elif insn.itype in [ida_allins.NN_jg]:
        dfuse="; D: U:EFLAGS"
    elif insn.itype in [ida_allins.NN_ja]:
        dfuse="; D: U:EFLAGS"
    elif insn.itype in [ida_allins.NN_jl]:
        dfuse="; D: U:EFLAGS"
    elif insn.itype in [ida_allins.NN_jnb]:
        dfuse="; D: U:EFLAGS"
    elif insn.itype in [ida_allins.NN_jle]:
        dfuse="; D: U:EFLAGS"
    elif insn.itype in [ida_allins.NN_setnz]:
        dfuse="; D:"+idc.print_operand(iterator,0)+", U:EFLAGS"
    elif insn.itype in [ida_allins.NN_cmp]:
        dfuse = "; D:EFLAGS, U:" + idc.print_operand(iterator,0).upper() + "," + idc.print_operand(iterator,1).upper()
    elif insn.itype in [ida_allins.NN_push]:
        if (search(list, idc.print_operand(iterator,0).upper())):
            dfuse="; D:[ESP],ESP, U:"+ idc.print_operand(iterator,0).upper() + ",ESP"
        elif (operand_search(list,idc.print_operand(iterator,0).upper()) is not None):
            dfuse="; D:[ESP],ESP, U:"+ operand_search(list, idc.print_operand(iterator,0).upper()) + ",ESP"
        else:
            dfuse="; D:[ESP],ESP, U:" + "ESP"
    elif insn.itype in [ida_allins.NN_pop]:
        dfuse=": D:"+idc.print_operand(iterator,0).upper()+",ESP, U:[ESP],ESP"
    elif insn.itype in [ida_allins.NN_test]:
        if (search(list,idc.print_operand(iterator,0).upper())):
            dfuse="; D:EFLAGS, U:"+idc.print_operand(iterator,0).upper()
        elif (operand_search(list, idc.print_operand(iterator,0).upper()) is not None):
            dfuse="; D:EFLAGS, U:"+operand_search(list,idc.print_operand(iterator,0).upper())
    elif insn.itype in [ida_allins.NN_call]:
        if (search(list, idc.print_operand(iterator,0).upper())):
            dfuse ="; D:EAX,ESP," + idc.print_operand(iterator,1).upper() + ", U:ESP"
        else:
            dfuse="; D:EAX,ESP, U:ESP"
    elif insn.itype in [ida_allins.NN_sub]:
        if (search(list, idc.print_operand(iterator,1).upper()) and search(list,idc.print_operand(iterator,0).upper())):
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,1).upper() +","+idc.print_operand(iterator,0).upper()
        elif (search(list,idc.print_operand(iterator,0).upper()) and not search(list,idc.print_operand(iterator,1).upper())):
            if (operand_search(list, idc.print_operand(iterator,1).upper()) is not None):
                dfuse = "; D:"+idc.print_operand(iterator,0)+",EFLAGS, U:"+idc.print_operand(iterator,0).upper()+","+operand_search(list,idc.print_operand(iterator,1).upper())
            else:
                dfuse = "; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper()
        elif(search(list,idc.print_operand(iterator,1).upper()) and not search(list,idc.print_operand(iterator,0).upper())):
            if (operand_search(list, idc.print_operand(iterator,0).upper()) is not None):
                dfuse = "; D:"+operand_search(list, idc.print_operand(iterator,0).upper())+",EFLAGS, U:"+operand_search(list,idc.print_operand(iterator,0).upper())+","+idc.print_operand(iterator,1).upper()
            else:
                dfuse="; D:EFLAGS, U:"
    elif insn.itype in [ida_allins.NN_add]:
        if (search(list, idc.print_operand(iterator,1).upper()) and search(list,idc.print_operand(iterator,0).upper())):
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,1).upper() +","+idc.print_operand(iterator,0).upper()
        elif (search(list,idc.print_operand(iterator,0).upper()) and not search(list,idc.print_operand(iterator,1).upper())):
            if (operand_search(list, idc.print_operand(iterator,1).upper()) is not None):
                dfuse = "; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper()+","+operand_search(list,idc.print_operand(iterator,1).upper())
            else:
                dfuse = "; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper()
        elif(search(list,idc.print_operand(iterator,1).upper()) and not search(list,idc.print_operand(iterator,0).upper())):
            if (operand_search(list, idc.print_operand(iterator,0).upper()) is not None):
                dfuse = "; D:"+operand_search(list, idc.print_operand(iterator,0).upper())+"EFLAGS, U:"+operand_search(list,idc.print_operand(iterator,0).upper())+","+idc.print_operand(iterator,1).upper()
            else:
                dfuse="; D: EFLAGS, U:"
    elif insn.itype in [ida_allins.NN_and]:
        if (search(list, idc.print_operand(iterator,1).upper())):
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper() + idc.print_operand(iterator,1).upper()
        else:
            if (operand_search(list, idc.print_operand(iterator,0).upper()) is not None):
                dfuse = "; D:"+operand_search(list, idc.print_operand(iterator,0).upper())+",EFLAGS, U:"+operand_search(list, idc.print_operand(iterator,0).upper())
            else:
                dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper()
    elif insn.itype in [ida_allins.NN_or]:
        if (search(list, idc.print_operand(iterator,0).upper()) and search(list, idc.print_operand(iterator,1).upper())):
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper() + ","+idc.print_operand(iterator,1).upper()
        else:
            if (operand_search(list, idc.print_operand(iterator,0).upper()) is not None):
                dfuse = "; D:"+operand_search(list, idc.print_operand(iterator,0).upper())+",EFLAGS, U:"+operand_search(list, idc.print_operand(iterator,0).upper())
            else:
                dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper()
    elif insn.itype in [ida_allins.NN_xor]:
        if (search(list, idc.print_operand(iterator,1).upper())):
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper()
        else:
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper()
    elif insn.itype in [ida_allins.NN_imul]:
        if (search(list, idc.print_operand(iterator,1).upper())):
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper() + ","+idc.print_operand(iterator,1).upper()
        else:
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper()
    elif insn.itype in [ida_allins.NN_inc]:
        if (operand_search(list, idc.print_operand(iterator,0).upper()) is not None):
            dfuse="; D:"+operand_search(list,idc.print_operand(iterator,0).upper())+",EFLAGS, U:"+operand_search(list,idc.print_operand(iterator,0).upper())
    elif insn.itype in [ida_allins.NN_dec]:
        if (operand_search(list, idc.print_operand(iterator,0).upper()) is not None):
            dfuse="; D:"+operand_search(list,idc.print_operand(iterator,0).upper())+",EFLAGS, U:"+operand_search(list,idc.print_operand(iterator,0).upper())
    elif insn.itype in [ida_allins.NN_sar]:
        if (search(list, idc.print_operand(iterator,1).upper())):
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper() + ","+ idc.print_operand(iterator,1).upper()
        else:
            dfuse="; D:"+idc.print_operand(iterator,0).upper()+",EFLAGS, U:"+idc.print_operand(iterator,0).upper()
    elif insn.itype in [ida_allins.NN_rep]:
        dfuse = "; D:[EDI], U:EAX"
    else:
        test = idc.print_operand(iterator,0)
        test1 = "ds:"
        if (test.find(test1) == -1):
            if (idc.print_insn_mnem(iterator) == "call"):
                dfuse = "; D:EAX,ESP, U:ESP"
            else:
                dfuse="; D: U:"
        else:
            dfuse="; D:ESP, U:ESP"
    return dfuse
    
def InstructionPrint(ea):
    func = idaapi.ida_funcs.get_func(ea)
    count = 1
    InstructionList = []
    for block in idaapi.FlowChart(func):
        iterator = block.start_ea
        while (iterator<block.end_ea):
            du_string = get_inst_type(iterator)
            InstructionList.append(InstructionStructure(count, hex(iterator),du_string))
            iterator = idc.next_head(iterator)
            count += 1
    return InstructionList

def driver():
    names = []
    for ea in idautils.Functions(): 
        name = ida_funcs.get_func_name(ea)
        print(hex(ea),name)
        dot = graphviz.Digraph(comment='trial')
        labels = {}
        labels_list=InstructionPrint(ea)
        
        for data in labels_list:
            label="n"+str(data.count)
            dot.node(label,data.address+data.defuse)
            labels[data.address]=label
        start = idc.get_segm_start(ea)
        end = idc.get_segm_end(ea)
        func = idaapi.ida_funcs.get_func(ea)
        
        blocks={}
        

        for block in idaapi.FlowChart(func):
            iterator = block.start_ea 
            prev=None
            while(iterator<block.end_ea):
                prev=hex(iterator)
                
                iterator = idc.next_head(iterator) 
                if(iterator<block.end_ea):
                    dot.edge(labels.get(prev),labels.get(hex(iterator)))
            blocks[hex(block.end_ea)]=prev
        

                
        for block in idaapi.FlowChart(func):                
            for succ in block.succs():
                if(labels.get(hex(succ.start_ea)) is not None):
                    dot.edge(labels.get(blocks.get(hex(block.end_ea))),labels.get(hex(succ.start_ea)))
        print(dot.source)
        dot.render(filename=name+".dot")



class myplugin_t(idaapi.plugin_t):
    flags = idaapi.PLUGIN_UNL
    comment = "This is a comment"
    help = "This is help"
    wanted_name = "My Python plugin"
    wanted_hotkey = "Alt-F8"

    def init(self):
        return idaapi.PLUGIN_OK

    def run(self, arg):
        driver()

    def term(self):
        pass


def PLUGIN_ENTRY():
    return myplugin_t()
